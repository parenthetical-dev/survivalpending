name: Test Suite

on:
  push:
    branches: [ "main", "dev" ]
  pull_request:
    branches: [ "main", "dev" ]

jobs:
  unit-tests:
    name: Unit & Integration Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: survivalpending_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup test database
        env:
          DATABASE_URL: postgresql://testuser:testpass@localhost:5432/survivalpending_test
        run: |
          npx prisma migrate deploy
          npx prisma generate

      - name: Run unit tests
        env:
          DATABASE_URL: postgresql://testuser:testpass@localhost:5432/survivalpending_test
          JWT_SECRET: test-secret
          TURNSTILE_SECRET_KEY: test-turnstile-secret
        run: npm test -- --ci --coverage --maxWorkers=2

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-report
          path: coverage/
          retention-days: 7

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: jest-results
          path: test-results/
          retention-days: 7

      - name: Test Report
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: Jest Tests
          path: 'test-results/jest-junit.xml'
          reporter: jest-junit

  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: survivalpending_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright Browsers
        run: npx playwright install --with-deps

      - name: Setup test database
        env:
          DATABASE_URL: postgresql://testuser:testpass@localhost:5432/survivalpending_test
        run: |
          npx prisma migrate deploy
          npx prisma generate

      - name: Run Playwright tests
        env:
          DATABASE_URL: postgresql://testuser:testpass@localhost:5432/survivalpending_test
          JWT_SECRET: test-secret
          TURNSTILE_SECRET_KEY: test-turnstile-secret
          NEXT_PUBLIC_TURNSTILE_SITE_KEY: test-site-key
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY || 'test-key' }}
          ELEVENLABS_API_KEY: ${{ secrets.ELEVENLABS_API_KEY || 'test-key' }}
          BASE_URL: http://localhost:3000
        run: npm run test:e2e

      - name: Upload Playwright Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

      - name: Upload Playwright Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-results
          path: test-results/
          retention-days: 30

      - name: Test Report
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: Playwright Tests
          path: 'test-results/junit.xml'
          reporter: java-junit

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [unit-tests, e2e-tests]
    if: always()
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Generate summary
        run: |
          echo "## Test Results Summary 🧪" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Unit test results
          if [ -f "artifacts/jest-results/jest-junit.xml" ]; then
            echo "### Unit Tests" >> $GITHUB_STEP_SUMMARY
            echo "✅ Unit tests completed" >> $GITHUB_STEP_SUMMARY
          else
            echo "### Unit Tests" >> $GITHUB_STEP_SUMMARY
            echo "❌ Unit tests failed or did not run" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # E2E test results
          if [ -f "artifacts/playwright-results/junit.xml" ]; then
            echo "### E2E Tests" >> $GITHUB_STEP_SUMMARY
            echo "✅ E2E tests completed" >> $GITHUB_STEP_SUMMARY
          else
            echo "### E2E Tests" >> $GITHUB_STEP_SUMMARY
            echo "❌ E2E tests failed or did not run" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Coverage info
          if [ -d "artifacts/coverage-report" ]; then
            echo "### Code Coverage" >> $GITHUB_STEP_SUMMARY
            echo "📊 Coverage report available in artifacts" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "- 📁 [Coverage Report](./coverage-report)" >> $GITHUB_STEP_SUMMARY
          echo "- 🎭 [Playwright Report](./playwright-report)" >> $GITHUB_STEP_SUMMARY
          echo "- 📊 [Test Results](./jest-results)" >> $GITHUB_STEP_SUMMARY

      - name: Comment PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const comment = `### 🧪 Test Results
            
            | Test Suite | Status |
            |------------|--------|
            | Unit Tests | ${{ needs.unit-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |
            | E2E Tests | ${{ needs.e2e-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |
            
            View detailed reports in the workflow artifacts.`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });