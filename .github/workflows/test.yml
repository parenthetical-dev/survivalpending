name: Test Suite

on:
  push:
    branches: [ "main", "dev" ]
  pull_request:
    branches: [ "main", "dev" ]

# Cancel in-progress runs when a new run is triggered
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

# Permissions needed for test reporting
permissions:
  contents: read
  pull-requests: write
  checks: write
  issues: write

jobs:
  unit-tests:
    name: Unit & Integration Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: survivalpending_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup test database
        env:
          DATABASE_URL: postgresql://testuser:testpass@localhost:5432/survivalpending_test
        run: |
          echo "Creating database schema..."
          npx prisma db push --skip-generate
          npx prisma generate
          echo "Database schema created successfully"

      - name: Run unit tests
        env:
          DATABASE_URL: postgresql://testuser:testpass@localhost:5432/survivalpending_test
          JWT_SECRET: test-secret
          TURNSTILE_SECRET_KEY: test-turnstile-secret
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY || 'test-key' }}
          ELEVENLABS_API_KEY: ${{ secrets.ELEVENLABS_API_KEY || 'test-key' }}
          GROQ_API_KEY: ${{ secrets.GROQ_API_KEY || 'test-key' }}
          BLOB_READ_WRITE_TOKEN: ${{ secrets.BLOB_READ_WRITE_TOKEN || 'test-token' }}
        run: |
          mkdir -p test-results
          # Run tests and capture exit code
          npm test -- --ci --coverage --maxWorkers=2 || TEST_EXIT_CODE=$?
          
          # Check if coverage directory exists
          if [ ! -d "coverage" ]; then
            echo "::warning::Coverage directory not found"
            mkdir -p coverage
            echo "" > coverage/lcov.info
          fi
          
          # Check if test results exist
          if [ ! -f "test-results/jest-junit.xml" ]; then
            echo "::warning::Test results file not found"
            echo '<?xml version="1.0" encoding="UTF-8"?><testsuites></testsuites>' > test-results/jest-junit.xml
          fi
          
          # Exit with original test exit code
          exit ${TEST_EXIT_CODE:-0}

      - name: Check coverage files
        id: coverage-check
        if: always()
        run: |
          if [ -f "coverage/lcov.info" ] && [ -s "coverage/lcov.info" ]; then
            echo "Coverage file exists and is not empty"
            echo "has_coverage=true" >> $GITHUB_OUTPUT
          else
            echo "::warning::Coverage file is missing or empty"
            echo "has_coverage=false" >> $GITHUB_OUTPUT
          fi

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-report
          path: coverage/
          retention-days: 7

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: jest-results
          path: test-results/
          retention-days: 7

      - name: Test Report
        uses: dorny/test-reporter@v1
        if: |
          always() && 
          github.event_name == 'pull_request' && 
          github.event.pull_request.head.repo.full_name == github.repository
        with:
          name: Jest Tests
          path: 'test-results/jest-junit.xml'
          reporter: jest-junit
          fail-on-error: false

  e2e-tests:
    name: E2E Tests (Shard ${{ matrix.shardIndex }}/${{ matrix.shardTotal }})
    runs-on: ubuntu-latest
    # Only run E2E tests on main branch or PRs to main
    if: github.ref == 'refs/heads/main' || (github.event_name == 'pull_request' && github.base_ref == 'main')
    strategy:
      fail-fast: false
      matrix:
        shardIndex: [1, 2]
        shardTotal: [2]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: survivalpending_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright Browsers
        run: npx playwright install --with-deps

      - name: Setup test database
        env:
          DATABASE_URL: postgresql://testuser:testpass@localhost:5432/survivalpending_test
        run: |
          echo "Creating database schema..."
          npx prisma db push --skip-generate
          npx prisma generate
          echo "Database schema created successfully"
          
      - name: Seed test database
        env:
          DATABASE_URL: postgresql://testuser:testpass@localhost:5432/survivalpending_test
          JWT_SECRET: test-secret
        run: |
          echo "Seeding test database..."
          npx tsx prisma/seed-test.ts
          echo "Test data seeded successfully"

      - name: Build Next.js app
        env:
          DATABASE_URL: postgresql://testuser:testpass@localhost:5432/survivalpending_test
          JWT_SECRET: test-secret
          TURNSTILE_SECRET_KEY: test-turnstile-secret
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY || 'test-key' }}
          ELEVENLABS_API_KEY: ${{ secrets.ELEVENLABS_API_KEY || 'test-key' }}
          GROQ_API_KEY: ${{ secrets.GROQ_API_KEY || 'test-key' }}
          BLOB_READ_WRITE_TOKEN: ${{ secrets.BLOB_READ_WRITE_TOKEN || 'test-token' }}
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN || '' }}
          PIRSCH_ACCESS_TOKEN: ${{ secrets.PIRSCH_ACCESS_TOKEN || '' }}
          META_ACCESS_TOKEN: ${{ secrets.META_ACCESS_TOKEN || '' }}
          META_TEST_EVENT_CODE: ${{ secrets.META_TEST_EVENT_CODE || '' }}
          SANITY_WEBHOOK_SECRET: ${{ secrets.SANITY_WEBHOOK_SECRET || 'test-secret' }}
          NEXT_PUBLIC_META_PIXEL_ID: ${{ secrets.META_PIXEL_ID || '' }}
        run: npm run build
        
      - name: Run Playwright tests
        env:
          DATABASE_URL: postgresql://testuser:testpass@localhost:5432/survivalpending_test
          JWT_SECRET: test-secret
          TURNSTILE_SECRET_KEY: test-turnstile-secret
          NEXT_PUBLIC_TURNSTILE_SITE_KEY: test-site-key
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY || 'test-key' }}
          ELEVENLABS_API_KEY: ${{ secrets.ELEVENLABS_API_KEY || 'test-key' }}
          GROQ_API_KEY: ${{ secrets.GROQ_API_KEY || 'test-key' }}
          BLOB_READ_WRITE_TOKEN: ${{ secrets.BLOB_READ_WRITE_TOKEN || 'test-token' }}
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN || '' }}
          PIRSCH_ACCESS_TOKEN: ${{ secrets.PIRSCH_ACCESS_TOKEN || '' }}
          META_ACCESS_TOKEN: ${{ secrets.META_ACCESS_TOKEN || '' }}
          META_TEST_EVENT_CODE: ${{ secrets.META_TEST_EVENT_CODE || '' }}
          SANITY_WEBHOOK_SECRET: ${{ secrets.SANITY_WEBHOOK_SECRET || 'test-secret' }}
          BASE_URL: http://localhost:3000
          FULL_BROWSER_MATRIX: ${{ github.ref == 'refs/heads/main' && 'true' || 'false' }}
          CI: true
        run: npx playwright test --config=playwright.config.ci.ts --shard=${{ matrix.shardIndex }}/${{ matrix.shardTotal }}
        timeout-minutes: 10

      - name: Upload Playwright Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report-${{ matrix.shardIndex }}
          path: playwright-report/
          retention-days: 30

      - name: Upload Playwright Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-results-${{ matrix.shardIndex }}
          path: test-results/
          retention-days: 30

      - name: Test Report
        uses: dorny/test-reporter@v1
        if: |
          always() && 
          github.event_name == 'pull_request' && 
          github.event.pull_request.head.repo.full_name == github.repository
        with:
          name: Playwright Tests
          path: 'test-results/junit.xml'
          reporter: java-junit
          fail-on-error: false

  upload-coverage:
    name: Upload Coverage to Codecov
    runs-on: ubuntu-latest
    needs: [unit-tests, e2e-tests]
    # Only run if both test jobs succeeded
    if: success()
    
    steps:
      - name: Download coverage artifact
        uses: actions/download-artifact@v4
        with:
          name: coverage-report
          path: coverage/
      
      - name: Check if coverage file exists
        id: coverage-check
        run: |
          if [ -f "coverage/lcov.info" ] && [ -s "coverage/lcov.info" ]; then
            echo "Coverage file exists and is not empty"
            echo "has_coverage=true" >> $GITHUB_OUTPUT
            ls -la coverage/
          else
            echo "::error::Coverage file is missing or empty"
            echo "has_coverage=false" >> $GITHUB_OUTPUT
            exit 1
          fi
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/lcov.info
          flags: unit
          name: unit-tests
          fail_ci_if_error: false
          verbose: true

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [unit-tests, e2e-tests, upload-coverage]
    if: always()
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Generate summary
        run: |
          echo "## Test Results Summary 🧪" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Unit test results
          if [ -f "artifacts/jest-results/jest-junit.xml" ]; then
            echo "### Unit Tests" >> $GITHUB_STEP_SUMMARY
            echo "✅ Unit tests completed" >> $GITHUB_STEP_SUMMARY
          else
            echo "### Unit Tests" >> $GITHUB_STEP_SUMMARY
            echo "❌ Unit tests failed or did not run" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # E2E test results
          if [ -f "artifacts/playwright-results/junit.xml" ]; then
            echo "### E2E Tests" >> $GITHUB_STEP_SUMMARY
            echo "✅ E2E tests completed" >> $GITHUB_STEP_SUMMARY
          else
            echo "### E2E Tests" >> $GITHUB_STEP_SUMMARY
            echo "❌ E2E tests failed or did not run" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Coverage info
          if [ -d "artifacts/coverage-report" ]; then
            echo "### Code Coverage" >> $GITHUB_STEP_SUMMARY
            echo "📊 Coverage report available in artifacts" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "- 📁 [Coverage Report](./coverage-report)" >> $GITHUB_STEP_SUMMARY
          echo "- 🎭 [Playwright Report](./playwright-report)" >> $GITHUB_STEP_SUMMARY
          echo "- 📊 [Test Results](./jest-results)" >> $GITHUB_STEP_SUMMARY

      - name: Comment PR
        if: github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const comment = `### 🧪 Test Results
            
            | Test Suite | Status |
            |------------|--------|
            | Unit Tests | ${{ needs.unit-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |
            | E2E Tests | ${{ needs.e2e-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |
            
            View detailed reports in the workflow artifacts.`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });