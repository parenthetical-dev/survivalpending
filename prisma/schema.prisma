generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String                  @id @default(cuid())
  username               String                  @unique
  passwordHash           String
  createdAt              DateTime                @default(now())
  lastLogin              DateTime?
  isBanned               Boolean                 @default(false)
  hasCompletedOnboarding Boolean                 @default(false)
  interventions          CrisisInterventionLog[]
  stories                Story[]
  demographics           UserDemographics?
}

model UserDemographics {
  id             String   @id @default(cuid())
  userId         String   @unique
  ageRange       String
  state          String
  genderIdentity String?
  racialIdentity String?
  urbanicity     String?
  createdAt      DateTime @default(now())
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Story {
  id               String                  @id @default(cuid())
  userId           String
  contentText      String
  contentSanitized String?
  audioUrl         String?
  audioJobId       String?
  voiceId          String?
  status           StoryStatus             @default(PENDING)
  moderationNotes  String?
  sentimentFlags   Json?
  flaggedHighRisk  Boolean                 @default(false)
  flaggedCrisis    Boolean                 @default(false)
  flaggedPositive  Boolean                 @default(false)
  showOnHomepage   Boolean                 @default(false)
  color            String?
  createdAt        DateTime                @default(now())
  approvedAt       DateTime?
  approvedBy       String?
  interventions    CrisisInterventionLog[]
  moderationLogs   ModerationLog[]
  user             User                    @relation(fields: [userId], references: [id])

  @@index([status, createdAt])
  @@index([userId])
  @@index([showOnHomepage, status, createdAt])
}

model CrisisInterventionLog {
  id                String              @id @default(cuid())
  userId            String
  storyId           String?
  triggerType       InterventionTrigger
  interventionShown Boolean             @default(true)
  resourcesClicked  String[]            @default([])
  timestamp         DateTime            @default(now())
  story             Story?              @relation(fields: [storyId], references: [id])
  user              User                @relation(fields: [userId], references: [id])

  @@index([userId, timestamp])
}

model ModerationLog {
  id          String           @id @default(cuid())
  storyId     String
  moderatorId String
  action      ModerationAction
  reason      String?
  timestamp   DateTime         @default(now())
  moderator   Admin            @relation(fields: [moderatorId], references: [id])
  story       Story            @relation(fields: [storyId], references: [id])

  @@index([storyId, timestamp])
}

model Admin {
  id             String          @id @default(cuid())
  username       String          @unique
  passwordHash   String
  permissions    String[]        @default(["moderate"])
  createdAt      DateTime        @default(now())
  moderationLogs ModerationLog[]
}

enum StoryStatus {
  PENDING
  APPROVED
  REJECTED
  FLAGGED
  QUARANTINED
}

enum InterventionTrigger {
  SUBMISSION
  VIEWING
  SENTIMENT_ANALYSIS
  KEYWORD_DETECTION
  OTHER
}

enum ModerationAction {
  APPROVE
  REJECT
  FLAG
  QUARANTINE
  REQUEST_EDIT
  NOTE
}
